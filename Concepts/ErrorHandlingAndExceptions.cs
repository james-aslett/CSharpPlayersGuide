//ERROR HANDLING AND EXCEPTIONS

//SPEEDRUN
//Exceptions are C#'s primary error handling mechanism
//Exceptions are objects of the Exception type (or a derived type)
//Put code that may throw exceptions in a try block, and place handlers in catch blocks: try { Something(); } catch (SomeTypeOfException e) { HandleError(); }
//Throw a new exception with the throw keyword: throw new Exception();
//A finally block identifies code that runs regardless of how the try block exits - exception, early return, or executing to completion: try { ... } finally { ... }
//This level contains several guidelines for throwing and catch exceptions

//We have been pretending nothing will ever go wrong in our programs, and it is time to face reality. What should we do when things go wrong? Consider this code that gets a number from the user between 1 and 10:
int GetNumberFromUser()
{
    int number = 0;

    while (number < 1 || number > 10)
    {
        Console.Write("Enter a number between 1 and 10: ");
        string? response = Console.ReadLine();
        number = Convert.ToInt32(response);
    }

    return number;
}

//What happens if they enter "asdf"? Convert.ToInt32 cannot convert this, and our program unravels. Under real-life circumstances, our program crashes and terminates. If you are running in VS with a debugger, the debugger is smart enough to recognize that a crash is imminent and pause the program for you to inspect its state in its death throes.

//In C#, when a piece of code recognizes it has encountered a dead end and cannot continue, a kind of error called an exception can be generated by the code that detects it. Exceptions bubble up from a method to its caller and then to that method's caller, looking to see if anything knows how to resolve the problem so that the program can keep running. This process of transferring control father up the call stack is called throwing the exception. Parts of your code that react to a thrown exception are exception handlers. Or you could say that the exception handler catches the exception to stop it from continuing further.

//HANDLING EXCEPTIONS
//